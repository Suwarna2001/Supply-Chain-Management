[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\SUWARNA\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\SUWARNA\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (AdoptOpenJDK Java 11.0.11)
[debug]       Load.loadUnit: plugins took 240.1608ms
[debug]       Load.loadUnit: defsScala took 0.4625ms
[debug] [Loading] Scanning directory C:\Users\SUWARNA\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\SUWARNA\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 85.8402 ms
[debug]           Load.resolveProject(global-plugins) took 106.3868ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\SUWARNA\.sbt\1.0\plugins, plugins: List(<none>))) took 267.7499ms
[debug] [Loading] Done in C:\Users\SUWARNA\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 326.9997ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4005ms
[debug]     Load.loadUnit(file:/C:/Users/SUWARNA/.sbt/1.0/plugins/, ...) took 586.4872ms
[debug]   Load.apply: load took 947.1348ms
[debug]   Load.apply: resolveProjects took 21.9793ms
[debug]   Load.apply: finalTransforms took 170.0134ms
[debug]   Load.apply: config.delegates took 16.9149ms
[debug]   Load.apply: Def.make(settings)... took 2144.8014ms
[debug]   Load.apply: structureIndex took 1258.4332ms
[debug]   Load.apply: mkStreams took 7.4229ms
[info] loading global plugins from C:\Users\SUWARNA\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 11468.2925ms
[debug]           Load.loadUnit: plugins took 134.8373ms
[debug]           Load.loadUnit: defsScala took 0.0077ms
[debug] [Loading] Scanning directory C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement\project
[debug]             Load.loadUnit: mkEval took 35.2702ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.0746 ms
[info] loading settings for project supplychainmanagement-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(supplychainmanagement-build) took 6.9612ms
[debug]             Load.loadTransitive: finalizeProject(Project(id supplychainmanagement-build, base: C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement\project, plugins: List(<none>))) took 19.1612ms
[debug] [Loading] Done in C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement\project, returning: (supplychainmanagement-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 16473.5666ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.265ms
[debug]         Load.loadUnit(file:/C:/Users/SUWARNA/IdeaProjects/SupplyChainManagement/project/, ...) took 16620.4965ms
[debug]       Load.apply: load took 16623.4554ms
[debug]       Load.apply: resolveProjects took 0.2486ms
[debug]       Load.apply: finalTransforms took 40.6262ms
[debug]       Load.apply: config.delegates took 1.1566ms
[debug]       Load.apply: Def.make(settings)... took 282.1356ms
[debug]       Load.apply: structureIndex took 115.3262ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 23749.2297ms
[debug]     Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement
[debug]       Load.loadUnit: mkEval took 2.1292ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.7346 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 91.0264ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement, plugins: List(<none>))) took 102.6141ms
[debug] [Loading] Done in C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 14256.5615ms
[debug]     Load.loadUnit: cleanEvalClasses took 163.8889ms
[debug]   Load.loadUnit(file:/C:/Users/SUWARNA/IdeaProjects/SupplyChainManagement/, ...) took 38172.2935ms
[debug] Load.apply: load took 38174.8283ms
[debug] Load.apply: resolveProjects took 0.17ms
[debug] Load.apply: finalTransforms took 50.3172ms
[debug] Load.apply: config.delegates took 0.4892ms
[debug] Load.apply: Def.make(settings)... took 298.7055ms
[debug] Load.apply: structureIndex took 40.7066ms
[debug] Load.apply: mkStreams took 0.0057ms
[info] set current project to SupplyChainManagement (in build file:/C:/Users/SUWARNA/IdeaProjects/SupplyChainManagement/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * root / idePackagePrefix
[warn]   +- C:\Users\SUWARNA\IdeaProjects\SupplyChainManagement\build.sbt:14
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59224 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59224, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SupplyChainManagement (in build file:/C:/Users/SUWARNA/IdeaProjects/SupplyChainManagement/)
[debug] > Exec(idea-shell, None, None)
